class Solution:
    def fourSumCount(self, A, B, C, D):
        """
        :type nums: list[int]
        :rtype: list[list[int]]
        """
        # nums.sort()
        # results = []
        # self.findNsum(nums, target, 4, [], results)
        # return results
        # A.sort()
        # B.sort()
        # C.sort()
        # D.sort()
        # print(A)
        # print(B)
        # print(C)
        # print(D)
        # results = self._sum([A,B,C,D], 0, 0)
        # self._sum([A,B,C,D], 0, 0)
        # print(results)
        # return len(results)
        # n = len(A)
        sum_map = {}
        for a in A:
            for b in B:
                s = a + b
                if s not in sum_map:
                    sum_map[s] = 1
                else: 
                    sum_map[s] += 1
        ans = 0
        for c in C:
            for d in D:
                s = -1 * (c + d)
                if s in sum_map:
                    ans += sum_map[s]

        return ans

    def _sum(self, array_list, target, lv):
        a_len = len(array_list)

        nums = array_list[lv]
        n = len(nums)
        ans = 0
        if n == 0:
            return ans  
        elif lv == a_len - 1:
            return nums.count(target)
        else:
            min_val = nums[0]
            max_val = nums[-1]
            for ilv in range(lv + 1, a_len):
                min_val += array_list[ilv][0]
                max_val += array_list[ilv][-1]
            # print('lv: {}  min: {}  target: {}  max: {}'.format(lv, min_val, target, max_val))
            if target < min_val or target > max_val:
                return 0

            ans_dict = {}

            for i in range(n):
                if (i == 0) or (nums[i-1] != nums[i]):
                    ans_dict[i] = self._sum(array_list, target-nums[i], lv+1)
                else:
                    ans_dict[i] = ans_dict[i-1]
                ans += ans_dict[i]
        return ans

if __name__ == '__main__':
    s = Solution()
#     print(s.fourSumCount([1,2], [-2,-1], [-1,2], [0,2]))
#     assert (s.fourSumCount([], [], [], [])) == 0
#     assert s.fourSumCount([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == 100000000

#     assert s.fourSumCount([-16,-30,-6,8,-26,-23,-14,-29,-23,10,7,9,5,-13,-2,-18,5,5,-31,-26,7,-32,-18,-30,-23,-30,9,-1,-13,-27,-9,-14,1,-18,-6,5,2,-15,-19,5,-17,6,-26,-11,-29,-15,-9,-12,-11,-18,-17,1,1,-1,-10,9,-3,7,0,-1,-10,10,-3,-26,-11,-27,-2,-26,-27,-8,-26,-23,-10,3,0,-11,-5,-4,-10,-31,8,-11,-22,-14,-9,-22,-20,-20,-5,-1,10,-29,-32,7,-26,-2,8,4,-15,-24],
# [8,-15,-26,10,-21,-20,6,-20,-22,-6,8,-8,-27,-9,-1,-27,-2,-24,1,9,-1,-4,9,7,-21,-11,0,-7,3,4,-13,-19,-13,-32,-12,-30,-17,-5,-31,-21,-14,-23,-31,-6,-26,-4,-21,-12,1,-3,-3,5,4,-13,-2,-20,-16,-6,3,-16,-1,-18,-31,-2,4,-2,-32,-5,-7,5,-5,-22,-20,-26,8,-24,-8,-23,4,7,-10,-31,-22,-7,-26,6,-17,5,-28,5,6,-11,-29,-1,-1,-12,-32,-16,-8,-10],
# [10,-25,-2,-1,-10,-18,-20,-17,10,-31,6,-12,5,-2,-19,-2,-25,-26,-21,-29,8,-28,-8,-18,-32,-24,-17,2,-25,-32,-7,3,-28,-31,-21,-9,2,-2,-18,-25,-14,-15,-11,5,-29,-23,-4,-4,10,0,-9,-24,6,-23,5,-7,-16,5,-17,6,-18,-8,5,-6,-29,-15,9,10,-12,8,5,3,5,9,-6,-25,-28,-21,8,-17,-31,-12,-2,2,-12,2,-28,9,-28,-13,-17,-27,10,-26,6,-25,-25,-19,10,-8],
# [-6,-29,-15,-6,-16,-18,1,-27,-15,-8,4,-14,-11,-28,5,-13,-18,-30,-19,-17,-17,3,6,-7,-5,-23,-20,-32,0,-17,-24,-10,-11,-23,-12,-31,-29,-31,3,-18,-16,-13,10,-18,-28,-27,-1,-23,2,10,0,-5,-8,4,-18,-16,-3,-4,-22,-15,2,0,-30,1,-1,-14,-9,-24,-24,-17,10,0,-29,-9,-19,-12,-22,1,-14,-22,2,-31,-22,-30,-29,-16,-15,-15,-14,-25,-28,7,-29,-5,-30,7,9,5,0,-6]) == 371377
 
#     assert s.fourSumCount([-26,-11,3,-8,-31,-29,-7,-10,-8,9,-24,9,-18,2,-3,5,4,1,-4,-23,-19,-14,-28,-30,-25,-15,1,-27,-19,9,5,-15,-6,8,9,-23,-9,-14,2,3,-2,-4,4,-15,7,9,-14,-8,-3,-1,-28,-2,-19,2,-31,-8,-19,-9,-29,-15,-4,-2,-18,10,2,-8,-6,4,4,-25,2,-27,-21,-12,-15,2,9,4,-4,-18,-22,-18,-24,-20,4,-6,-12,-4,7,-23,-32,-4,-16,5,3,-21,-15,-22,5,-25],
# [-29,-1,-12,-12,-4,4,4,-25,-21,-3,-25,-2,-16,-15,-22,-26,-31,-9,-19,10,-1,-1,-6,-28,-32,-31,-10,-31,-8,1,5,-19,-29,-8,-25,-25,-14,-27,-1,-26,6,-20,0,-3,-25,-22,3,-20,-25,-4,-6,-27,-8,-26,-4,-25,-31,-27,-32,-29,-14,10,-25,-11,-32,-25,-13,-5,-27,-30,-5,-4,-12,0,-4,9,-27,-6,-28,-30,-19,-5,-19,-18,-3,-32,-17,-1,-10,3,-17,-31,-26,-16,-10,6,-19,-19,3,-2],
# [-3,-17,-23,-28,-27,-28,-28,5,-18,-32,-7,0,-27,5,-15,-30,9,6,4,-11,3,5,10,-2,-32,-22,-30,-9,-4,10,8,-9,0,-26,-8,-7,-3,-21,-22,-28,-17,-14,-15,-9,10,4,-8,-32,9,-7,-7,-18,-5,2,-11,-27,-2,9,8,-26,-2,-8,-32,-11,-3,-16,-22,8,-29,-3,-10,-30,8,5,-23,-2,-22,-15,-32,-2,-23,-3,0,-16,-10,-29,-18,-24,-24,-16,-1,3,-22,-23,3,-20,7,-16,-11,6],
# [-4,-13,-10,-2,5,-23,-10,6,7,-23,-12,-21,4,-8,-9,-5,-18,-5,-22,-30,-23,9,-27,-1,5,-18,-23,-6,1,-23,-20,-30,5,-21,-15,-30,10,-26,-7,-10,-21,-12,-4,9,-8,2,-27,-14,-11,0,-1,-26,-27,8,-14,9,-19,-23,-10,-31,-16,-17,-22,-13,9,-26,5,-14,4,-11,4,-8,4,-29,-32,-24,-22,-6,-3,7,-17,-19,-32,9,-31,-31,-30,-6,-10,-4,-7,-27,-25,-25,7,-6,-17,7,-30,6]) == 317721

    print(s.fourSumCount(
        [-268435441,-268434600,-268434993,-268435357,-268434692,-268434749,-268435266,-268434456,-268435317,-268435261,-268434827,-268434527,-268434811,-268435165,-268434656,-268434992,-268435385,-268434456,-268435410,-268434590,-268434935,-268434512,-268434502,-268434664,-268435392,-268434592,-268435183,-268435301,-268434930,-268434781,-268434664,-268434995,-268434516,-268434576,-268434474,-268434804,-268435168,-268435241,-268435199,-268434821,-268435402,-268434891,-268435214,-268435340,-268434576,-268434926,-268434902,-268434708,-268435048,-268434793,-268435363,-268435362,-268434993,-268434744,-268435010,-268435001,-268434781,-268434601,-268434736,-268435173,-268435376,-268435321,-268435392,-268435342,-268434630,-268434862,-268435263,-268434841,-268434809,-268435181,-268435184,-268434859,-268434464,-268434702,-268434729,-268434794,-268434935,-268434483,-268434948,-268434482,-268435152,-268434781,-268434622,-268434650,-268435405,-268434901,-268434927,-268435189,-268435028,-268435401,-268434959,-268434515,-268435371,-268435203,-268434729,-268435002,-268435414,-268434803,-268434474,-268434838],
        [-268435449,-268434534,-268435051,-268434517,-268434544,-268434879,-268434597,-268435326,-268434748,-268434560,-268435192,-268434478,-268434810,-268435153,-268435061,-268434470,-268434733,-268435363,-268434580,-268435329,-268435227,-268434868,-268434475,-268434829,-268434804,-268434917,-268435134,-268434478,-268434525,-268434567,-268435434,-268435203,-268434804,-268434979,-268435141,-268434879,-268435046,-268435389,-268434928,-268435313,-268434892,-268434623,-268435100,-268434522,-268435178,-268435169,-268434670,-268435040,-268435267,-268434857,-268434667,-268434463,-268434960,-268434903,-268434588,-268435431,-268434466,-268435154,-268434990,-268434544,-268435262,-268435067,-268435158,-268434596,-268434641,-268434466,-268434773,-268435050,-268435293,-268435148,-268434614,-268434504,-268434797,-268435128,-268435336,-268434660,-268435163,-268435405,-268434462,-268434785,-268435383,-268435244,-268435406,-268434939,-268435416,-268435177,-268434580,-268434931,-268434803,-268435114,-268435072,-268434850,-268434500,-268434632,-268435073,-268435366,-268435250,-268435094,-268434460,-268434947],
        [268434570,268435299,268434594,268435215,268435163,268434582,268434957,268434905,268434934,268435013,268434659,268435339,268434868,268435282,268435372,268434735,268435201,268434846,268435158,268434479,268434970,268435345,268434991,268434939,268435018,268435409,268434748,268434985,268435016,268434607,268435104,268434693,268435007,268434724,268435410,268434519,268435127,268434513,268435287,268435182,268434786,268435198,268434932,268434973,268434975,268434490,268434879,268434792,268435321,268435421,268434546,268434805,268434979,268434857,268434710,268434704,268435310,268434584,268434688,268434570,268434529,268434935,268435392,268434816,268435018,268435020,268435353,268435447,268434891,268435017,268435350,268435063,268434588,268434799,268434502,268434850,268434596,268434614,268435268,268435023,268435104,268434794,268434895,268434964,268435271,268435130,268434866,268434596,268434721,268434912,268434848,268435244,268435077,268434848,268435322,268434767,268434651,268435129,268435386,268435275],
        [268434703,268435305,268434939,268434879,268434698,268435394,268434889,268435213,268435372,268435152,268434962,268434967,268434772,268435121,268434751,268434884,268435060,268435048,268435221,268434797,268434489,268435270,268434499,268434767,268434750,268435025,268434910,268434684,268434486,268434969,268435423,268434999,268435162,268434565,268434852,268435387,268435322,268434503,268435044,268434761,268435151,268435261,268434728,268434686,268434781,268435110,268434743,268435339,268434663,268435305,268435301,268434666,268434469,268434893,268435192,268434568,268434676,268434569,268434963,268434889,268435373,268434510,268434820,268434824,268435285,268435092,268435304,268435201,268434841,268435241,268434497,268435107,268434531,268434556,268434643,268435163,268435226,268435453,268434704,268435013,268434831,268435386,268435058,268435346,268434914,268435404,268435274,268434686,268434757,268434953,268435337,268435108,268435309,268435093,268434780,268434836,268434755,268435191,268434663,268434533]
    ))