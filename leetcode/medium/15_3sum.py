class Solution:
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        n = len(nums)
        ans = []
        i = 0
        while i < n:
            C = -nums[i]
            front = i + 1
            back = n - 1

            while front < back:
                A = nums[front]
                B = nums[back]
                s = A + B

                if s > C:
                    back -= 1
                elif s < C:
                    front += 1
                else:
                    ans.append([A,B,-C])

                    # avoid A dup
                    while front + 1 < n and A == nums[front]:
                        front += 1
                    # avoid B dep
                    while back > 0 and B == nums[back]:
                        back -= 1
            
            # avoid C dup
            while i + 1 < n and nums[i] == nums[i+1]:
                i += 1

            i += 1

        return ans

if __name__ == '__main__':
    s = Solution()
    print(s.threeSum([0,0,0]))
    print(s.threeSum([-1,0,1,2,-1,-4]))
    # print(s.threeSum([-4,-2,1,-5,-4,-4,4,-2,0,4,0,-2,3,1,-5,0]))
    # print(s.threeSum([-4,-2,-2,-2,0,1,2,2,2,3,3,4,4,6,6]))
    
    # print(s.threeSum([13,4,-6,-7,-15,-1,0,-1,0,-12,-12,9,3,-14,-2,-5,-6,7,8,2,-4,6,-5,-10,-4,-9,-14,-14,12,-13,-7,3,7,2,11,7,9,-4,13,-6,-1,-14,-12,9,9,-6,-11,10,-14,13,-2,-11,-4,8,-6,0,7,-12,1,4,12,9,14,-4,-3,11,10,-9,-8,8,0,-1,1,3,-15,-12,4,12,13,6,10,-4,10,13,12,12,-2,4,7,7,-15,-4,1,-15,8,5,3,3,11,2,-11,-12,-14,5,-1,9,0,-12,6,-1,1,1,2,-3]))
    # print(s.threeSum([-4,-8,7,13,10,1,-14,-13,0,8,6,-13,-5,-4,-12,2,-11,7,-5,0,-9,-14,-8,-9,2,-7,-13,-3,13,9,-14,-6,8,1,14,-5,-13,8,-10,-5,1,11,-11,3,14,-8,-10,-12,6,-8,-5,13,-15,2,11,-5,10,6,-1,1,0,0,2,-7,8,-6,3,3,-13,8,5,-5,-3,9,5,-4,-14,11,-8,7,10,-6,-3,11,12,-14,-9,-1,7,5,-15,14,12,-5,-8,-2,4,2,-14,-2,-12,6,8,0,0,-2,3,-7,-14,2,7,12,12,12,0,9,13,-2,-15,-3,10,-14,-4,7,-12,3,-10]))